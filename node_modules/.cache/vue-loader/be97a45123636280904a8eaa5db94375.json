{"remainingRequest":"/Users/agesp/WebstormProjects/npm/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/agesp/WebstormProjects/npm/src/components/rpn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/agesp/WebstormProjects/npm/src/components/rpn.vue","mtime":1570015880000},{"path":"/Users/agesp/WebstormProjects/npm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/agesp/WebstormProjects/npm/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/agesp/WebstormProjects/npm/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/agesp/WebstormProjects/npm/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"rpn\",\n    methods: {\n        calc: function () {\n            var stack = [];\n            var size = 0;\n            let expression = this.$refs.input.value;\n\n            for (var i = 0; i < expression.length; i++) {\n\n                // Skip spaces.\n                while (expression[i] === ' ')\n                    i++;\n\n                // If char is a number -> find next element to push on the stack.\n                if (!isNaN(expression[i]) || (expression[i] === '-' && !isNaN(expression[i + 1]))) {\n                    let parsed = parseFloat(expression.substring(i, expression.length));\n                    if (typeof parsed !== 'undefined') {\n                        let toPush = parsed;\n                        ++size;\n                        stack.push(toPush);\n                        i += toPush.toString().length;\n                    }\n                }\n\n                // If char is not a number than it is either an operator or a dot.\n                // If it is a dot (that is not part of any real number), skip it.\n                else if (expression[i] && expression[i] !== '.') {\n                    let v1 = stack.pop();\n                    let v2 = stack.pop();\n\n                    // If poped elements are not defined, the expression is not valid.\n                    // If it is valid, evaluate it.\n                    if (!isNaN(v1) && !isNaN(v2)) {\n                        stack.push(eval(v2 + (expression[i] === 'x' ? '*' : expression[i]) + v1))\n                        --size;\n                    }\n                    else {\n                        alert('Please enter a valid expression');\n                        return;\n                    }\n                }\n            }\n            if (size === 1)\n                this.result = stack.pop();\n            else\n                alert('Please enter a valid expression');\n        }\n    },\n    data() {\n        return {\n            result: ''\n        }\n    }\n}\n",{"version":3,"sources":["rpn.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rpn.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <form @submit=\"calc\" action=\"javascript:void(0);\" id=\"rpn-form\">\n        <input type=\"text\" pattern=\"([-]{0,1}[0-9]+[.]{0,1}[0-9]*[.+\\*x\\-\\/ ]*)+\" ref=\"input\" id=\"rpn-input\"/>\n        <button type=\"submit\" id=\"rpn-calc\">Calculate</button>\n        <div v-if=\"result !== ''\" id=\"rpn-result\">{{ result }}</div>\n    </form>\n</template>\n\n<script>\n    export default {\n        name: \"rpn\",\n        methods: {\n            calc: function () {\n                var stack = [];\n                var size = 0;\n                let expression = this.$refs.input.value;\n\n                for (var i = 0; i < expression.length; i++) {\n\n                    // Skip spaces.\n                    while (expression[i] === ' ')\n                        i++;\n\n                    // If char is a number -> find next element to push on the stack.\n                    if (!isNaN(expression[i]) || (expression[i] === '-' && !isNaN(expression[i + 1]))) {\n                        let parsed = parseFloat(expression.substring(i, expression.length));\n                        if (typeof parsed !== 'undefined') {\n                            let toPush = parsed;\n                            ++size;\n                            stack.push(toPush);\n                            i += toPush.toString().length;\n                        }\n                    }\n\n                    // If char is not a number than it is either an operator or a dot.\n                    // If it is a dot (that is not part of any real number), skip it.\n                    else if (expression[i] && expression[i] !== '.') {\n                        let v1 = stack.pop();\n                        let v2 = stack.pop();\n\n                        // If poped elements are not defined, the expression is not valid.\n                        // If it is valid, evaluate it.\n                        if (!isNaN(v1) && !isNaN(v2)) {\n                            stack.push(eval(v2 + (expression[i] === 'x' ? '*' : expression[i]) + v1))\n                            --size;\n                        }\n                        else {\n                            alert('Please enter a valid expression');\n                            return;\n                        }\n                    }\n                }\n                if (size === 1)\n                    this.result = stack.pop();\n                else\n                    alert('Please enter a valid expression');\n            }\n        },\n        data() {\n            return {\n                result: ''\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    #rpn-form\n    {\n        position: relative;\n        top: 50%;\n        font-family: unset;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    #rpn-form > button, #rpn-form > div, #rpn-form > input\n    {\n        height: 40px;\n        padding: 10px;\n        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);\n        border-radius: 10px;\n        outline: none;\n    }\n\n    #rpn-input{\n        width: 500px;\n        border-radius: 10px;\n        border: 1px solid lightblue;\n    }\n\n    #rpn-calc\n    {\n        width: 100px;\n        margin-left: 10px;\n        border: 1px solid #004a69;\n        background: #004a69;\n        color: white;\n        font-weight: bold;\n        -webkit-box-sizing: content-box;\n        -moz-box-sizing: content-box;\n        box-sizing: content-box;\n    }\n\n    #rpn-result\n    {\n        position: absolute;\n        top: -120px;\n        left: 50%;\n        transform: translateX(-50%);\n        border: 1px solid lightblue;\n        background: white;\n        width: auto;\n        border-radius: 50% !important;\n        vertical-align: middle;\n        line-height: 40px;\n    }\n\n</style>"]}]}